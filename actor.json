{"kind":"Article","sha256":"6d3ae78d5cfaf7708f2ef1f8a0be0e223dacf044ebe09b455a8590bf77dd8cd5","slug":"actor","location":"/content/actor.md","dependencies":[],"frontmatter":{"title":"Actor Model","content_includes_title":false,"github":"https://github.com/AmitXShukla/AgentsOfAI","numbering":{"title":{"offset":1}},"edit_url":"https://github.com/AmitXShukla/AgentsOfAI/blob/main/content/actor.md","exports":[{"format":"md","filename":"actor.md","url":"/build/actor-ef138097eac968ed0d6794c3b03e9547.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"In this and the following section, we focus on the core concepts of AutoGen: agents, agent runtime, messages, and communication – the foundational building blocks for an multi-agent applications.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"p0Ff0UPAqP"}],"key":"C2plxdew8j"},{"type":"paragraph","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"children":[{"type":"text","value":"Let’s create an AI Agent and see what it does.","position":{"start":{"line":5,"column":1},"end":{"line":5,"column":1}},"key":"DtNziJ5thy"}],"key":"OiFYNHmKAK"},{"type":"paragraph","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"children":[{"type":"text","value":"First of all, An Agent is a software entity like an Actor, designed to operate autonomously. An AI agent maintains its own state, perceives its environment (e.g., through messages or sensor inputs), and takes actions to achieve specific goals. These actions—such as updating its state, sending messages, executing code, or interacting with external systems—can influence both the agent and its surroundings.","position":{"start":{"line":7,"column":1},"end":{"line":7,"column":1}},"key":"TZAh3ti0qq"}],"key":"rdmm3DvA1s"},{"type":"paragraph","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Unlike typical software components, AI agents often exhibit intelligent behaviors, such as learning from experience, adapting to changes, or making decisions in uncertain conditions.","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"LRUeq8SEEN"}],"key":"DLP77nrcWG"},{"type":"paragraph","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"children":[{"type":"text","value":"In essence, an AI agent is a goal-directed entity that interacts with its environment, blending autonomy with intelligence (such as interpret messages, perform reasoning, and execute actions). Many sophisticated software systems can be modeled as collections of such agents, each pursuing its objectives while collaborating or competing with others.","position":{"start":{"line":11,"column":1},"end":{"line":11,"column":1}},"key":"GgrayEzkZq"}],"key":"dn8yLFNG7G"},{"type":"heading","depth":2,"position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"children":[{"type":"text","value":"AI Agent","position":{"start":{"line":13,"column":1},"end":{"line":13,"column":1}},"key":"tRimIs7vL9"}],"identifier":"ai-agent","label":"AI Agent","html_id":"ai-agent","implicit":true,"key":"sesheQEgYw"},{"type":"paragraph","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"children":[{"type":"text","value":"Just to re-iterate, an Agent is a software entity like an Actor, designed to operate autonomously. Let’s define an An Autonomous actor Agent.","position":{"start":{"line":15,"column":1},"end":{"line":15,"column":1}},"key":"nLBZ3akVrf"}],"key":"O5we0WeANC"},{"type":"mermaid","value":"\nflowchart LR\n    subgraph AI_Agent[AI Agent]\n        direction TB\n        State[State]\n    end\n\n    Environment[Environment] -->|Perception: messages, sensor inputs| AI_Agent\n    AI_Agent -->|Actions: update state, send messages, execute code, interact with systems | Environment\n    AI_Agent -->|Actions| External_Systems[External Systems]\n\n    style AI_Agent fill:#99FF33,stroke:#007BFF,stroke-width:2px\n    style State fill:#FFFFFF,stroke:#007BFF,stroke-width:1px\n    style Environment fill:#E6FFE6,stroke:#00CC00,stroke-width:2px\n    style External_Systems fill:#FFFACD,stroke:#FFD700,stroke-width:2px","position":{"start":{"line":17,"column":1},"end":{"line":33,"column":1}},"key":"eWDP75nKSg"},{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"from AutoGen Documentation","position":{"start":{"line":35,"column":1},"end":{"line":35,"column":1}},"key":"YN3U8xozyl"}],"key":"tX5JXUDLgN"},{"type":"paragraph","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"children":[{"type":"text","value":"The Core API is designed to be unopinionated and flexible. So at times, you may find it challenging. Continue if you are building an interactive, scalable and distributed multi-agent system and want full control of all workflows. If you just want to get something running quickly, you may take a look at the AgentChat API.","position":{"start":{"line":36,"column":1},"end":{"line":36,"column":1}},"key":"RHYixQy0NE"}],"key":"D6HUMUPGHB"},{"type":"paragraph","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"children":[{"type":"text","value":"If you just want to see something running, there is no need to go through rest of this chapter and < 10 lines of code will spin a live AI Assistant for you.","position":{"start":{"line":38,"column":1},"end":{"line":38,"column":1}},"key":"zhO6y7UiKQ"}],"key":"gJFVcyLwWU"}],"key":"xvvX5ot7cV"},{"type":"code","lang":"python","value":"# sample code just for reference\n# running AI Agents in < 10 lines of code\n# pip install -U \"autogen-agentchat\" \"autogen-ext[openai]\"\nimport asyncio\nfrom autogen_agentchat.agents import AssistantAgent\nfrom autogen_ext.models.openai import OpenAIChatCompletionClient\n\nasync def main() -> None:\n    agent = AssistantAgent(\"assistant\", OpenAIChatCompletionClient(model=\"gpt-4o\"))\n    print(await agent.run(task=\"Say 'Hello World!'\"))\n\nasyncio.run(main())","position":{"start":{"line":41,"column":1},"end":{"line":54,"column":1}},"key":"vRTRv4o0c4"},{"type":"blockquote","position":{"start":{"line":56,"column":1},"end":{"line":56,"column":1}},"children":[{"type":"paragraph","position":{"start":{"line":56,"column":1},"end":{"line":56,"column":1}},"children":[{"type":"text","value":"Proceed with AutoGen Core, with the understanding that we want to develop a complete AI Agent Framework to support a complex business use case where we intend to have complete control over the entire workflow.","position":{"start":{"line":56,"column":1},"end":{"line":56,"column":1}},"key":"lnEH05CU5p"}],"key":"WBy09GJcdp"}],"key":"NHON3SB40L"},{"type":"heading","depth":2,"position":{"start":{"line":58,"column":1},"end":{"line":58,"column":1}},"children":[{"type":"text","value":"what is actor model?","position":{"start":{"line":58,"column":1},"end":{"line":58,"column":1}},"key":"JyFO722FXO"}],"identifier":"what-is-actor-model","label":"what is actor model?","html_id":"what-is-actor-model","implicit":true,"key":"CHEman5wxi"},{"type":"admonition","kind":"note","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"from wiki","position":{"start":{"line":60,"column":1},"end":{"line":60,"column":1}},"key":"eiH6X2hTUL"}],"key":"sNMzHHHBU5"},{"type":"paragraph","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"children":[{"type":"text","value":"The actor model in computer science is a mathematical model of concurrent computation that treats an actor as the basic building block of concurrent computation.","position":{"start":{"line":61,"column":1},"end":{"line":61,"column":1}},"key":"t0pWpl3kiZ"}],"key":"eSDhlGigUH"},{"type":"paragraph","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"children":[{"type":"text","value":"In response to a message it receives, an actor can: make local decisions, create more actors, send more messages, and determine how to respond to the next message received. Actors may modify their own private state, but can only affect each other indirectly through messaging (removing the need for lock-based synchronization).","position":{"start":{"line":63,"column":1},"end":{"line":63,"column":1}},"key":"PQWwnknlX7"}],"key":"pWNPbnSGPT"}],"key":"iBdoR8Scst"},{"type":"heading","depth":2,"position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"children":[{"type":"text","value":"AI Agent Implementation","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"tdIstx3VqA"}],"identifier":"ai-agent-implementation","label":"AI Agent Implementation","html_id":"ai-agent-implementation","implicit":true,"key":"R3JAiQptrw"},{"type":"paragraph","position":{"start":{"line":68,"column":1},"end":{"line":68,"column":1}},"children":[{"type":"text","value":"Stand alone implementation of an AI Agent","position":{"start":{"line":68,"column":1},"end":{"line":68,"column":1}},"key":"kClnMuhl0s"}],"key":"nxg3tf4so3"},{"type":"code","lang":"python","value":"class MyFirstAgent():\n    def __init__(self) -> None:\n        super().__init__()\n\n    def do_something(self, message: str) -> None:\n        print(f\"received message: {message}\")\n\nFirstAgent = MyFirstAgent()\nFirstAgent.do_something(\"Hello World!\")","position":{"start":{"line":70,"column":1},"end":{"line":80,"column":1}},"key":"DzOvsQYO3k"},{"type":"admonition","kind":"seealso","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"result","position":{"start":{"line":82,"column":1},"end":{"line":82,"column":1}},"key":"eybIxTLhWA"}],"key":"dQsAra56zB"},{"type":"code","lang":"","value":"received message: Hello World!","position":{"start":{"line":83,"column":1},"end":{"line":83,"column":1}},"key":"zo5Yz9MslM"}],"key":"lybDVMH0MX"},{"type":"code","lang":"python","value":"# standalone implementation of an AI Agent\n# add Agent identifier\n\nclass MyFirstAgent:\n    def __init__(self, name: str, agent_id: str, property: str) -> None:\n        self.name = name\n        self.agent_id = agent_id\n        self.property = property\n        # No arguments needed for object.__init__()\n        super().__init__()\n\n    def do_something(self, message: str) -> None:\n        print(f\"received message: {message}\")\n\n    def get_something(self, message: str) -> None:\n        print(f\"Pretend it's incoming message: {message}\")\n\n    def set_something(self, message: str) -> None:\n        print(f\"Pretend it's outcoming message: {message}\")\n\n    def run_something(self, message: str) -> None:\n        print(f\"Pretend this is coming from a API given a query: {message}\")            \n\n# Instantiate the agent with name and agent_id\nFirstAgent = MyFirstAgent(\"APIGuy\", \"AgentID123\", \"runs API\")\nprint(FirstAgent.do_something(\"Hello World!\"))\nprint(FirstAgent.name, FirstAgent.agent_id, FirstAgent.property)","position":{"start":{"line":86,"column":1},"end":{"line":114,"column":1}},"key":"abp8go8Xbu"},{"type":"admonition","kind":"seealso","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"result","position":{"start":{"line":116,"column":1},"end":{"line":116,"column":1}},"key":"mRZOpiMFiY"}],"key":"Z5kIkPuaNx"},{"type":"code","lang":"","value":"received message: Hello World!\nNone\nAPIGuy AgentID123 runs API","position":{"start":{"line":117,"column":1},"end":{"line":119,"column":1}},"key":"qHphEp1Rae"}],"key":"eMs4hOpRRZ"},{"type":"paragraph","position":{"start":{"line":122,"column":1},"end":{"line":124,"column":1}},"children":[{"type":"text","value":"So, we created our first AI Agent, but this is nothing but a simple Python OOPs class, there is some Agentic characteristics we built here.\nWe gave it an identity, name and it does something. This Agent, let’s say is an API Agent.\nbut if you think about it, what is Agentic, An Agent has an identity and able to communicate (lets say, send and receive data aka messages).","position":{"start":{"line":122,"column":1},"end":{"line":122,"column":1}},"key":"jInlbKlUTE"}],"key":"ZRdQ0GhW5X"},{"type":"paragraph","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"children":[{"type":"text","value":"so for now, let’s give this Agent a unique identity and then enable this agent with a mechanism to send and receive data (aka messages), We will worry about making it more intelligent in later steps.","position":{"start":{"line":126,"column":1},"end":{"line":126,"column":1}},"key":"s34XaVQpko"}],"key":"Whs0EAF4Zb"},{"type":"paragraph","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"children":[{"type":"text","value":"let’s create another sample agent.","position":{"start":{"line":128,"column":1},"end":{"line":128,"column":1}},"key":"CLxBekrOFJ"}],"key":"yoqgWvlg6F"},{"type":"code","lang":"python","value":"# standalone implementation of an AI Agent\n# add Agent identifier\n# add Agent behavior\n\nclass MySecondAgent:\n    def __init__(self, name: str, agent_id: str, \n                property: str, model: str, \n                tools: str, RAG: str) -> None:\n        self.name = name\n        self.agent_id = agent_id\n        self.property = property\n        self.model = model # assume llama3.3\n        self.tools = tools # assume a Tool Function\n        self.RAG = RAG # assume ChromaDB\n        # No arguments needed for object.__init__()\n        super().__init__()\n\n    def do_something(self, message: str) -> None:\n        print(f\"received message: {message}\")\n\n    def get_something(self, message: str) -> None:\n        # self.model\n        # use llama3.3 LLM model\n        print(f\"Pretend it's incoming message: {message}\")\n\n    def set_something(self, message: str) -> None:\n        # self.RAG\n        # use RAG to write data into\n        print(f\"Pretend it's outcoming message: {message}\")\n\n    def run_something(self, message: str) -> None:\n        # self.tools\n        # use tools to run a function\n        print(f\"Pretend this is coming from a LLM given a prompt: {message}\")            \n\n# Instantiate the agent with name and agent_id\nSecondAgent = MySecondAgent(\"LLMGuy\", \"AgentID124\", \n                            \"runs LLM inference\", \"llama3.2\", \n                            \"ChromaDB\", \"exmToolFunc\")\nprint(SecondAgent.do_something(\"Hello World!\"))\nprint(SecondAgent.name, SecondAgent.agent_id, SecondAgent.property)","position":{"start":{"line":130,"column":1},"end":{"line":172,"column":1}},"key":"y0tChqTFMV"},{"type":"admonition","kind":"seealso","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"result","position":{"start":{"line":174,"column":1},"end":{"line":174,"column":1}},"key":"LGcDQ5ever"}],"key":"aVO8BCaH9Z"},{"type":"code","lang":"","value":"received message: Hello World!\nNone\nLLMGuy AgentID124 runs LLM inference","position":{"start":{"line":175,"column":1},"end":{"line":177,"column":1}},"key":"X6Zf3qOFYa"}],"key":"QrDmzj9DYL"},{"type":"mermaid","value":"graph TD\n    subgraph Agent1\n        A1[Agent 1]\n        A1 --> A1_name[Name: AgentOne]\n        A1 --> A1_id[ID: 001]\n        A1 --> A1_rag[RAG: Enabled]\n        A1 --> A1_tool[Tool: WebSearch]\n        A1 --> A1_model[Model: xAI-Grok]\n    end\n\n    subgraph Agent2\n        A2[Agent 2]\n        A2 --> A2_name[Name: AgentTwo]\n        A2 --> A2_id[ID: 002]\n        A2 --> A2_rag[RAG: Enabled]\n        A2 --> A2_tool[Tool: Analysis]\n        A2 --> A2_model[Model: xAI-Grok]\n    end\n\n    A1 -->|Sends Message| M1(( ))\n    M1 -->|Receives Message| A2\n    A2 -->|Sends Message| M2(( ))\n    M2 -->|Receives Message| A1\n\n    classDef agent fill:#f9f,stroke:#333,stroke-width:2px;\n    class A1,A2 agent\n    classDef prop fill:#bbf,stroke:#f66,stroke-width:2px;\n    class A1_name,A1_id,A1_rag,A1_tool,A1_model,A2_name,A2_id,A2_rag,A2_tool,A2_model prop","position":{"start":{"line":180,"column":1},"end":{"line":209,"column":1}},"key":"liPeDsFKsq"},{"type":"paragraph","position":{"start":{"line":211,"column":1},"end":{"line":211,"column":1}},"children":[{"type":"text","value":"As you can see, these two agents can maintain their state, represented as an Actor model, and exchange data in the form of messages with each other.","position":{"start":{"line":211,"column":1},"end":{"line":211,"column":1}},"key":"sulbgmM9I3"}],"key":"aDidqenRg2"},{"type":"paragraph","position":{"start":{"line":213,"column":1},"end":{"line":213,"column":1}},"children":[{"type":"text","value":"However, in real life, it’s not this simple. Here is a graph of 10 such agents, and you can imagine how cluttered this graph will look if you have more than 10 agents, which is often the case in real-life scenarios.","position":{"start":{"line":213,"column":1},"end":{"line":213,"column":1}},"key":"gP2yo8Sn5y"}],"key":"IVMQn7riGA"},{"type":"mermaid","value":"graph TD\n    subgraph Agent1\n        A1[Agent 1]\n        A1 --> A1_name[Name: AgentOne]\n        A1 --> A1_id[ID: 001]\n        A1 --> A1_rag[RAG: Enabled]\n        A1 --> A1_tool[Tool: WebSearch]\n        A1 --> A1_model[Model: xAI-Grok]\n    end\n\n    subgraph Agent2\n        A2[Agent 2]\n        A2 --> A2_name[Name: AgentTwo]\n        A2 --> A2_id[ID: 002]\n        A2 --> A2_rag[RAG: Enabled]\n        A2 --> A2_tool[Tool: Analysis]\n        A2 --> A2_model[Model: xAI-Grok]\n    end\n\n    subgraph Agent3\n        A3[Agent 3]\n        A3 --> A3_name[Name: AgentThree]\n        A3 --> A3_id[ID: 003]\n        A3 --> A3_rag[RAG: Enabled]\n        A3 --> A3_tool[Tool: DataProcessing]\n        A3 --> A3_model[Model: xAI-Grok]\n    end\n\n    subgraph Agent4\n        A4[Agent 4]\n        A4 --> A4_name[Name: AgentFour]\n        A4 --> A4_id[ID: 004]\n        A4 --> A4_rag[RAG: Enabled]\n        A4 --> A4_tool[Tool: MachineLearning]\n        A4 --> A4_model[Model: xAI-Grok]\n    end\n\n    subgraph Agent5\n        A5[Agent 5]\n        A5 --> A5_name[Name: AgentFive]\n        A5 --> A5_id[ID: 005]\n        A5 --> A5_rag[RAG: Enabled]\n        A5 --> A5_tool[Tool: NaturalLanguageProcessing]\n        A5 --> A5_model[Model: xAI-Grok]\n    end\n\n    subgraph Agent6\n        A6[Agent 6]\n        A6 --> A6_name[Name: AgentSix]\n        A6 --> A6_id[ID: 006]\n        A6 --> A6_rag[RAG: Enabled]\n        A6 --> A6_tool[Tool: ImageRecognition]\n        A6 --> A6_model[Model: xAI-Grok]\n    end\n\n    subgraph Agent7\n        A7[Agent 7]\n        A7 --> A7_name[Name: AgentSeven]\n        A7 --> A7_id[ID: 007]\n        A7 --> A7_rag[RAG: Enabled]\n        A7 --> A7_tool[Tool: SpeechRecognition]\n        A7 --> A7_model[Model: xAI-Grok]\n    end\n\n    subgraph Agent8\n        A8[Agent 8]\n        A8 --> A8_name[Name: AgentEight]\n        A8 --> A8_id[ID: 008]\n        A8 --> A8_rag[RAG: Enabled]\n        A8 --> A8_tool[Tool: PredictiveAnalytics]\n        A8 --> A8_model[Model: xAI-Grok]\n    end\n\n    subgraph Agent9\n        A9[Agent 9]\n        A9 --> A9_name[Name: AgentNine]\n        A9 --> A9_id[ID: 009]\n        A9 --> A9_rag[RAG: Enabled]\n        A9 --> A9_tool[Tool: SentimentAnalysis]\n        A9 --> A9_model[Model: xAI-Grok]\n    end\n\n    subgraph Agent10\n        A10[Agent 10]\n        A10 --> A10_name[Name: AgentTen]\n        A10 --> A10_id[ID: 010]\n        A10 --> A10_rag[RAG: Enabled]\n        A10 --> A10_tool[Tool: AnomalyDetection]\n        A10 --> A10_model[Model: xAI-Grok]\n    end\n\n    A1 -->|Sends Message| M1(( ))\n    M1 -->|Receives Message| A2\n    A2 -->|Sends Message| M2(( ))\n    M2 -->|Receives Message| A1\n    A3 -->|Sends Message| M3(( ))\n    M3 -->|Receives Message| A4\n    A4 -->|Sends Message| M4(( ))\n    M4 -->|Receives Message| A3\n    A5 -->|Sends Message| M5(( ))\n    M5 -->|Receives Message| A6\n    A6 -->|Sends Message| M6(( ))\n    M6 -->|Receives Message| A5\n    A7 -->|Sends Message| M7(( ))\n    M7 -->|Receives Message| A8\n    A8 -->|Sends Message| M8(( ))\n    M8 -->|Receives Message| A7\n    A9 -->|Sends Message| M9(( ))\n    M9 -->|Receives Message| A10\n    A10 -->|Sends Message| M10(( ))\n    M10 -->|Receives Message| A9\n\n    classDef agent fill:#f9f,stroke:#333,stroke-width:2px;\n    class A1,A2,A3,A4,A5,A6,A7,A8,A9,A10 agent\n    classDef prop fill:#bbf,stroke:#f66,stroke-width:2px;\n    class A1_name,A1_id,A1_rag,A1_tool,A1_model,A2_name,A2_id,A2_rag,A2_tool,A2_model,A3_name,A3_id,A3_rag,A3_tool,A3_model,A4_name,A4_id,A4_rag,A4_tool,A4_model,A5_name,A5_id,A5_rag,A5_tool,A5_model,A6_name,A6_id,A6_rag,A6_tool,A6_model,A7_name,A7_id,A7_rag,A7_tool,A7_model,A8_name,A8_id,A8_rag,A8_tool,A8_model,A9_name,A9_id,A9_rag,A9_tool,A9_model,A10_name,A10_id,A10_rag,A10_tool,A10_model prop","position":{"start":{"line":215,"column":1},"end":{"line":332,"column":1}},"key":"TU9PhfBfaP"}],"key":"vRVLcEzXkP"}],"key":"AsyTmcAnOA"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Definition","url":"/agent","group":"AI Agent"},"next":{"title":"Use Case","url":"/usecase","group":"AI Agent"}}},"domain":"http://localhost:3004"}