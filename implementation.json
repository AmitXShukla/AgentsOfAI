{"kind":"Article","sha256":"09794164f4915432108bd6f82b3d3df2a94a1ca1ae36a9aaf42f06f8cb56e653","slug":"implementation","location":"/content/implementation.md","dependencies":[],"frontmatter":{"title":"Agent","content_includes_title":false,"github":"https://github.com/AmitXShukla/AgentsOfAI","numbering":{"title":{"offset":1}},"edit_url":"https://github.com/AmitXShukla/AgentsOfAI/blob/main/content/implementation.md","exports":[{"format":"md","filename":"implementation.md","url":"/build/implementation-dd2cf92c156964be3a9ca54cf405580c.md"}]},"mdast":{"type":"root","children":[{"type":"block","children":[{"type":"paragraph","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Now, we have a decision to make, either we can continue developing our own version of AI Agentic implementation or instead of re-inventing the wheel, start using an given AI Agent framework capabilities.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"rUVRtJgiYE"}],"key":"itvnI9OYd6"},{"type":"admonition","kind":"warning","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"Warning","key":"Y7wWgtLLnI"}],"key":"gKYe8W1PYq"},{"type":"paragraph","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"children":[{"type":"text","value":"Please see, I will continously make many mistakes, write poor code, only to learn from it and refactor it as I learn.","position":{"start":{"line":6,"column":1},"end":{"line":6,"column":1}},"key":"iua6GlcVVa"}],"key":"ylZUI6qvlC"}],"key":"FXZWrz9Up9"},{"type":"heading","depth":2,"position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"children":[{"type":"text","value":"Standalone Implementation","position":{"start":{"line":9,"column":1},"end":{"line":9,"column":1}},"key":"aEcKPOB8cF"}],"identifier":"standalone-implementation","label":"Standalone Implementation","html_id":"standalone-implementation","implicit":true,"key":"ICb3y6oX7N"},{"type":"code","lang":"python","value":"# standalone implementation of an AI Agent\n\nclass MyFirstAgent():\n    def __init__(self) -> None:\n        super().__init__()\n\n    def do_something(self, message: str) -> None:\n        print(f\"received message: {message}\")\n\nFirstAgent = MyFirstAgent()\nFirstAgent.do_something(\"Hello World!\")","position":{"start":{"line":10,"column":1},"end":{"line":22,"column":1}},"key":"LQlArjjoxP"},{"type":"admonition","kind":"seealso","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"result","position":{"start":{"line":24,"column":1},"end":{"line":24,"column":1}},"key":"lmWbqjQcGY"}],"key":"vp3br3YQNG"},{"type":"code","lang":"","value":"received message: Hello World!","position":{"start":{"line":25,"column":1},"end":{"line":25,"column":1}},"key":"EwHMDg27w7"}],"key":"w4N59ZXvcr"},{"type":"heading","depth":2,"position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"children":[{"type":"text","value":"Use Case","position":{"start":{"line":28,"column":1},"end":{"line":28,"column":1}},"key":"OLPDWGUS2T"}],"identifier":"use-case","label":"Use Case","html_id":"use-case","implicit":true,"key":"gaRuv6B9FE"},{"type":"paragraph","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"children":[{"type":"text","value":"To learn more about AI Agent implementation, Instead of building a ","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"key":"M4aX7STMNZ"},{"type":"inlineCode","value":"TODO-List Tutorial","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"key":"RZiIJktpRW"},{"type":"text","value":", letâ€™s focus on automating our HR Time Sheet process with AI Agents.","position":{"start":{"line":30,"column":1},"end":{"line":30,"column":1}},"key":"k7dgx1kZo0"}],"key":"jPOmDYlczV"},{"type":"mermaid","value":"flowchart LR\n    subgraph \"PTO Request Process\"\n        A((Start)) --> B[Calculate dates]\n        B --> C[Check PTO balance]\n        C --> D[Submit PTO request]\n        D --> E[Manager reviews PTO request]\n        E --> F[Check team availability]\n        F --> G[Approve PTO request]\n        G --> H[Send notifications]\n        H --> I((End))\n    end\n    subgraph \"AI Agent Communication\"\n        Agent1[AI Agent 1: SQL Ops] -- \"direct exchange\" --> Agent2[AI Agent 2: Docs Proc]\n        Agent2 -- \"direct exchange\" --> Agent1\n        Agent1 -- \"broadcast\" --> Broadcast[Broadcast Channel]\n        Agent2 -- \"broadcast\" --> Broadcast\n        Broadcast -- \"notify\" --> OtherAgents[Other Agents]\n    end\n    style A fill:#e0f7fa,stroke:#000\n    style B fill:#f1f8e9,stroke:#000\n    style C fill:#e0f7fa,stroke:#000\n    style D fill:#f1f8e9,stroke:#000\n    style E fill:#e0f7fa,stroke:#000\n    style F fill:#f1f8e9,stroke:#000\n    style G fill:#e0f7fa,stroke:#000\n    style H fill:#f1f8e9,stroke:#000\n    style I fill:#e0f7fa,stroke:#000\n    style Agent1 fill:#e0f7fa,stroke:#000\n    style Agent2 fill:#e0f7fa,stroke:#000\n    style Broadcast fill:#f1f8e9,stroke:#000\n    style OtherAgents fill:#e0f7fa,stroke:#000","key":"EMBlIvEi4a"},{"type":"heading","depth":2,"position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"children":[{"type":"text","value":"Routed Agent","position":{"start":{"line":66,"column":1},"end":{"line":66,"column":1}},"key":"o6oL5ZPCUK"}],"identifier":"routed-agent","label":"Routed Agent","html_id":"routed-agent","implicit":true,"key":"EY8eoUrGLv"},{"type":"code","lang":"python","value":"# refactor above code to use AutoGen Core framework\nfrom autogen_core import RoutedAgent        ## import AutoGen Core\nclass MyFirstAgent(RoutedAgent):            ## pass RoutedAgent as base class\n    def __init__(self) -> None:\n        super().__init__(\"MyFirstAgent\")    ## Agent Description\n\n    def do_something(self, message: str) -> None:\n        print(f\"received message: {message}\")\n\n## commented below code because RoutedAgent \n## are instantiated via runtime not standalone\n## will see how to instantiate Agent class later\n\n# FirstAgent = MyFirstAgent()\n# FirstAgent.do_something(\"Hello World!\")\n\n## what is RoutedAgent class?\n## take some time to understand super class Agent initialization\n## read RoutedAgent base class implemenation signature\n## what are the advantages of using this\nRoutedAgent.__dict__","position":{"start":{"line":67,"column":1},"end":{"line":89,"column":1}},"key":"yGEzI9COxL"},{"type":"admonition","kind":"seealso","children":[{"type":"admonitionTitle","children":[{"type":"text","value":"result","position":{"start":{"line":91,"column":1},"end":{"line":91,"column":1}},"key":"oiAOQbA4pe"}],"key":"ljLtKTtTWB"},{"type":"code","lang":"","value":"mappingproxy({'__module__': 'autogen_core._routed_agent',\n          '__doc__': 'A base class for agents that route messages to handlers based on the type of the message\\n    and optional matching functions.\\n\\n    To create a routed agent, subclass this class and add message handlers as methods decorated with\\n    either :func:`event` or :func:`rpc` decorator.\\n\\n    Example:\\n\\n    .. code-block:: python\\n\\n        from dataclasses import dataclass\\n        from autogen_core import MessageContext\\n        from autogen_core import RoutedAgent, event, rpc\\n\\n\\n        @dataclass\\n        class Message:\\n            pass\\n\\n\\n        @dataclass\\n        class MessageWithContent:\\n            content: str\\n\\n\\n        @dataclass\\n        class Response:\\n            pass\\n\\n\\n        class MyAgent(RoutedAgent):\\n            def __init__(self):\\n                super().__init__(\"MyAgent\")\\n\\n            @event\\n            async def handle_event_message(self, message: Message, ctx: MessageContext) -> None:\\n                assert ctx.topic_id is not None\\n                await self.publish_message(MessageWithContent(\"event handled\"), ctx.topic_id)\\n\\n            @rpc(match=lambda message, ctx: message.content == \"special\")  # type: ignore\\n            async def handle_special_rpc_message(self, message: MessageWithContent, ctx: MessageContext) -> Response:\\n                return Response()\\n    ',\n          '__init__': <function autogen_core._routed_agent.RoutedAgent.__init__(self, description: str) -> None>,\n          'on_message_impl': <function autogen_core._routed_agent.RoutedAgent.on_message_impl(self, message: Any, ctx: autogen_core._message_context.MessageContext) -> typing.Any | None>,\n          'on_unhandled_message': <function autogen_core._routed_agent.RoutedAgent.on_unhandled_message(self, message: Any, ctx: autogen_core._message_context.MessageContext) -> None>,\n          '_discover_handlers': <classmethod(<function RoutedAgent._discover_handlers at 0x727070171440>)>,\n          '_handles_types': <classmethod(<function RoutedAgent._handles_types at 0x7270701714e0>)>,\n          '__parameters__': (),\n          '_is_protocol': False,\n          '__subclasshook__': <classmethod(<function _proto_hook at 0x72707d09a700>)>,\n          'internal_extra_handles_types': [],\n          'internal_unbound_subscriptions_list': [],\n          '__abstractmethods__': frozenset(),\n          '_abc_impl': <_abc._abc_data at 0x727070de2500>})","position":{"start":{"line":92,"column":1},"end":{"line":105,"column":1}},"key":"j2jWbv24m4"}],"key":"cN0SLegIEL"},{"type":"code","lang":"python","value":"from autogen_core import RoutedAgent\n\nclass TaskAgent(RoutedAgent):\n    def __init__(self) -> None:\n        super().__init__(\"PTOAgent\")\n\n    def do_something(self, message: str) -> None: ## Refactor\n        # fetches tasks an employee        ## Refactor\n        print(f\"received message: {message}\") ## Refactor\n\n    def do_something_more(self, message: str) -> None:## Refactor\n        # poeple working on one task   ## Refactor\n        print(f\"received message: {message}\")        ## Refactor\n\n    def do_something_even_more(self, message: str) -> None: ## Refactor\n        # approved PTOs for employee   ## Refactor\n        # fetch all other teams working on same tasks\n        # and their PTO during same period## Refactor\n        print(f\"received message: {message}\")        ## Refactor","position":{"start":{"line":108,"column":1},"end":{"line":128,"column":1}},"key":"rVqOozh222"},{"type":"code","lang":"python","value":"from autogen_core import RoutedAgent\n\nclass LLMAgent(RoutedAgent):\n    def __init__(self) -> None:\n        super().__init__(\"PTOAgent\")\n\n    def do_something(self, message: str) -> None:\n        # figure out Thursday and Friday date\n        print(f\"received message: {message}\")\n\n    def do_something_more(self, message: str) -> None:\n        # draft an approval request to manager\n        print(f\"received message: {message}\")\n\n    def do_something_even_more(self, message: str) -> None:\n        # greets and chat with Susan\n        print(f\"received message: {message}\")\n    \n    def do_something_even_more(self, message: str) -> None:\n        # call next agent once\n        print(f\"received message: {message}\")\n\n\nclass ManagerAgent(RoutedAgent):\n    def __init__(self) -> None:\n        super().__init__(\"PTOAgent\")\n\n    def do_something(self, message: str) -> None:\n        # approve or disapprove PTO\n        print(f\"received message: {message}\")\n\n    def do_something_more(self, message: str) -> None:\n        # draft an approval request to manager\n        print(f\"received message: {message}\")\n\nclass BroadcasterAgent(RoutedAgent):\n    def __init__(self) -> None:\n        super().__init__(\"PTOAgent\")\n\n    def do_something(self, message: str) -> None:\n        # notify all employee that Susan is taking PTO\n        print(f\"received message: {message}\")\n\n    def do_something_more(self, message: str) -> None:\n        # draft an approval request to manager\n        print(f\"received message: {message}\")","position":{"start":{"line":130,"column":1},"end":{"line":177,"column":1}},"key":"V69JAftbZ7"}],"key":"puUHGgHj6h"}],"key":"oRldLFQ6Oc"},"references":{"cite":{"order":[],"data":{}}},"footer":{"navigation":{"prev":{"title":"Model Runtime","url":"/modelruntime","group":"AI Agent"},"next":{"title":"Messages","url":"/messages","group":"AutoGen Core"}}},"domain":"http://localhost:3005"}